# jdbc 01

JDBC
==> 자바 프로그램을 이용해서 데이터베이스를 컨트롤 할 수 있는 외부  API 이다.
	
	데이터베이스는 그 데이터베이스가 가진 DBMS에 의해서 성능이 결정된다.
	이말은 각각의 데이터베이스마다 질의 명령을 처리하는 방법이 다르다는 것이다.
	이말은 개발자 입장에서 보자면 데이터베이스마다
	그 데이터베이스의 DBMS에 따라서 프로그램 방식을 다르게 해서 사용해야한다는 것이다.
	
	그래서
	자바안에 DBMS를 만들어 놓고
	개발자는 자바의 DBMS(DataBase Management System)에게만 명령을 내리도록 해 놓았다.
	(자바에 있는 DBMS 방식으로만 작업하면 된다.)
	자바 안에 있는 DBMS가 실제 데이터베이스와 연결해서 처리하도록 해 놓았다.
	
	이 문제를 해결하기 위한 자바 DBMS가 바로 JDBC(Java database connectivity) 이다.
	우리가 JDBC를 배운다는 것은
	결국 우리는 JDBC에게만 명령을 전달하면
	JDBC가 알아서 필요한 데이터베이스의 DBMS에게 명령을 전달하게 된다.
	따라서 개발자가 훨씬 편해질 것이다.
	
참고 ]
	JDBC와 실제 DBMS를 연결하는 프로그램은
	그 데이터베이스를 만든 회사에서 제공한다.
	
*****
자바에서 개발자(데이터베이스 작업을 원하는 개발자)가 가장 먼저 해야할 일
	
	1. 사용하려는 데이터베이스와  JDBC를 연결하는 프로그램을 찾아내는 것이다.
		이 프로그램을 "JDBC Driver" 라고 부른다.
		
	2. 찾아낸 외부 API를 이클립스에 등록해서 이클립스에서
		이 외부 API를 사용할 수 있도록 해야한다.
		
		외부 API 등록 방법
			1. 프로젝트 선택
			2. 마우스오른쪽 버튼 클릭해서 맨 하단의 properties 선택
			3. 속성 창에서 왼쪽 메뉴중 
					Java Build Path 를 선택한다.
			4. 위 탭에서 Libraries 탭을 선택하고
			5. 오른쪽 메뉴에서 Add External JARs 를 클릭한다.
			6. 다운로드 받은 jar 파일을 선택해준다.
			
	참고 ]
		왜 인터페이스로 만들었나
		==> 세션을 관리하는 방법이
			각 dbms마다 다르기때문에 
			접속하는 순간 함수의 기능을 
			거기에 맞도록 조절하기 위해서....
			
			
----------------------------------------------------------------------------------------

JDBC 프로그램 작성 순서
	0. JDBC 드라이버를 준비
	1. 드라이버를 로딩한다.
	
		Class.forName(클래스경로);
			oracle.jdbc.driver.OracleDriver
		
	2. 데이터 베이스에 접속한다.
	
		Connection con = DriverManager.getConnection(String url, String id, String pw);
		
	------------------------여기까지각 DBMS 마다 조금씩 작업이 다른 부분 ---------------------
	
	아래부터 공통
	
	3. JDBC와  실제 DBMS 사이에 명령을 전달할 수 있는 도구를 만들어야 한다.
		(오라클은 서버 데이터 데이스이다.
			즉, 프로그램이 동작하는 컴퓨터와 데이터베이스가 있는 컴퓨터가 다를 수 있다.)
			
		사용하는 클래스(인터페이스) Statement
	
		만드는 방법
			Statement stmt = con.createStatement();
			
			참고 ] 
				질의 명령을 실행하는 방법
				(Statement에 질의명령을 실어서 보내는 방법)
				
					1. execute(String sql)
						==> 질의 명령을 실행한 후 JDBC 에게 보고하지 않는다.
							반환값은 boolean 타입인데
							이 반환값의 의미는
							질의명령이 잘 실행되었는지를 알려주는 반환값이 아니고
							데이터베이스가 JDBC 에게 명령을 받았는지만 알려주는 역할이다.
							
					주로 실행 여부와 관계없는 명령을 보낼때
						CREATE, INSERT, ..주로 사용하는 명령
	
	
	
					2. executeQuery(String sql)
						==> 반환값이 ResultSet 인데w
							질의명령의 실행결과 탄생하는 인라인 테이블(가상의 테이블, 메모리상 가상 테이블)
							관리하는 클래스이다.
							
							100%  SELECT질의명령에 사용한다.
							
					3. executeUpdate(String sql)
						==> 반환값이 int 인데
							이 반환값의 의미는 질의명령의 실행결과
							수정된 데이터의 갯수를 반환해준다.
							
							예 ] 
							UPDATE 질의명령의 실행결과 몇개의 행이 수정이 되었는지//
							DELETE	
							
						주로 질의명령의 실행결과 여부를 판단해야 할 경우
						사용 하는 함수
						
							UPDATE, DELETE, INSERT,..
					
	
	
	
	
	
	
	