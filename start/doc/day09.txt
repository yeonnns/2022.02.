#  day09

함수 (Method, Function(자바에서는 사용 X))
	
==> 한가지 작업을 실행하기 위해 만들어진 가장 작은 단위의 프로그램
	기능의 최소단위...
	
	프로그램이란?
	이런 함수들이 모여서 원하느 목적을 이루도록 구성하는 것.
	
	*****
	참고 ] 
		1. 함수는 누군가 호출해야만 실행된다.
			==> 함수 스스로가 실행되는 경우는 없다.
				ex)메인함수도 안보이지만 jvm이 호출하는것
		
		2. 함수는 실행이 완료되면 자신을 호출한 곳으로 실행 순서를 넘긴다.
		
			ex ]
				class Test {
					static void abc(){
						(1)
					}
					
					public static void main(String[] args){
						(2)
						abc();
						(3)
					}
					
					static void xyz(){
					(4)
						}
					}
					
					2 -> 1 -> 3 종료
 					
	
	함수 만드는 방법 ] 
	
	형식 ] 
	
	접근지정자	[속성]	반환값타입 함수이름(매개변수 리스트....){	
		함수내용			
		}
		
		1. 속성
			final
			static
			abstract
			....
			
		2. 접근지정자
			==> 
			해당 개체의 접근할 수 있는 권한을 지정해놓은 것
			클래스 부분에서 설명
				
		3. 함수 이름 
			==> 
			개발자(함수 제작하는 사람)가 지정하는 사용자 정의
			
		4. 매개변수 리스트
			==> 
			변수 선언 형태로 만드는 것.
			갯수와는 상관없다.
			
			==> 
				
			함수가 원하는 작업을 하기 위해서 반드시 필요한 데이터가 있은 것이다.
			이 데이터를 기억할 준비를 하는 것이다.
				
		5. 반환값 타입
			==>
			함수는 한가지 목적을 달성하기 위한 가자 작은단위의 프로그램이다.
			함수를 실행한다는 말은 그 목적을 달성하겠다. 라는 의미
			이떄 그 달성된 목적에 따라서 결과가 존재할 수 있다.
			
			반환값타입이란?
				==> 함수가 어떤 작업을 실행 할 결과를 알려주는것.			
					==> 이 결과는 경우에 따라서 달라진다.
					결과가 존재하는        경우 : 그 결과에 대한 타입만 적어준다.
					결과가 존재하지 않는 경우 : 반드시 "void" 라고 적어준다.
										ex) println
										
			
			참고 ] 
				함수는 한가지 목적을 위해 만들어지는 
				가장 작은 단위의 프로그램이다.
				따라서 반환값은 
					*****
					한개이거나 없을 수 있다.
				반환값이 2개 이상인 함수는 자바에서는 절대로 만들 수 없다.
				
				
				예 ]
				
				public int, float abc(){
				}	====> 절대로 안된다.
				
			결론 ] 
				함수는 4가지 형태를 벗어날 수 없다.
				
				1. void abc(){}
				
				2. int abc(){}
				
				3. void abc(int no){}
				
				4. int abc(int no){}		
					
------------------------------------------------------------------
	
	return 명령
	==> 함수 안에서 사용할 수 있는 명령
	                  
		의미 ]
			1. 함수 실행을 종료하세요.
			2. 결과가 이쓰면 결과를 내보내고 함수를 종료하세요.
			
		향식1 ]
			==> 1번의 의미
			return;				
					
		형식2 ] 
			==>2번의 의미
			
			return 데이터;
			==> 데이터를 반환해주고 (이 함수를 실행한 위치에 데이터를 내보내 주고)			
				실행중인 이 함수를 종료하세요.
				
		참고]
			반환값이 void인 경우는 반드시 return만 사용 할 수 있다.
			반환값이 void가 아닌 경우는 반드시
				return 데이터; 
			의 형식만 사용 가능.	
					
			반환값이 void인 경우는 return을 생략할 수 있다.
			<== 함수의 내용이 다 실행되면 블럭이 닫히고 함수가 자동 종료되기떄문에.....
			
			
=====================================================================================
	
	함수의 사용 방법
	==> 함수는 반드시 호출애햐만 사용 할 수 있다.
		따라서 함수를 사용한다는 것은 그 함수를 호출한다는 의미가 된다.
		
		형식 ]
			함수이름(데이터, ....);
			
			데이터란 ?
				==> 함수는 그 함수가 실행되기 위해 필요한 데이터를 받을 준비를 하고 있다.(매개변수)
					==> 따라서 그 함수에 일을 시키기 위해서는 필요한 데이트를 반드시 입력해줘야한다.
					==> 결론적으로 데이터(파라미터:Parameter)란?
						함수가 준비하고 있는 매개변수 리스트에 기억할 데이터를 제공하는 것...
						
				==> 
					데이터는 그 함수가 준비한 매개변수의 갯수와
					반드시 일치해야 하고(넘쳐도 안되고 모자라도 안된다.)
					그 형태, 순서 역시 일치해야 한다.
					
					
					예 ]
						void abc(int a){ //int a 가 매개체 역할을 해서 매개 변수
						
						==> abc(); 		X : 데이터가 입력이 안됐다.
							abc(5);		O
							abc(3.4);	X : 데이터의 형태가 다르다.
							abc(3, 4);	X : 갯수가 다르다.
						}
					
-------------------------------------------------------------------------------

반환값 사용 방법
	==> 함수의 실행이 종료되면 반환값을 줄 수 있다.
		이 반환값은 함수 호출 부분에 그대로 들어온다.
			
		따라서 함수 호출 부분에 예상되는 반환값을 기록해 보고
		문법적으로 이상이 없으면 그것이 반환값의 사용이 된다.
		
		예 ]
			int abc(){
				int k = 5;
				return k;
				
			}			
			
			void xyz(int a){}
			
			int lmn(int a){
				...
				return ??;			
			}		
		
			abc(); 							: O
			int a abc();					: O
			System.out.println(abc());		: O 
			xyz(abc());		xyz(5)와 동일		: O
			abc(lmn());		만들어지지 않은 함수	: X
			
			
		참고 ]
			반환값이 있는 함수 라도
			필요하지 않으면 반환값을 이용하지 않아도 상관없다.
			
================================================================================


	객체 지향 언어(Object Oriented Programming : OOP)
			==> 클래스를 이용해서 프로그램을 만들어 나가는 언어
			
	클래스란?
			==> 하나의 목적을 달성하기 위해서 필요한 기능들을 모아 놓은
			프로그램의 기본 단위
			
			예 ]
			문자열을 관리해야겠다.
			==> String
			네트워크를 처리해야겠다.
			==> Soket
			
	따라서 클래스의 구성요소는
		1. 변수(Field)	: 필요한 데이터를 보관하고 있어야 한다.
		2. 함수(Method)	: 뭔가를 해결하기 위한 기능이 있어야 한다.
		
		==> 이 두가지를 합쳐서 멤버(Member)라 부른다.
		
	클래스 제작 방법

		형식 ]
		
			접근 지정자 		[속성]	class	클래스 이름{
			변수선언;
			변수선언;
			...
			함수선언;
			...
			}
			
		*****
		객체란 ? 메모리에 올려져 있는 클래스
		클래스는 설계도에 불과하다.
		즉, 클래스만 가지고  있다고 해서 이것이 실행되는 것이 아니다.
		반드시 클래스가 실행가능한 물건으로 만들어져야 실행된다.
		(메모리에 올려진 상태...)
		
			Object = Reference + Instance
			(객체) 		(변수)	(인스턴스)
			
		결론적으로 객체 지향 언어는
		클래스틑 기반으로 해서 만들어진
		Object에 의해서 만들어지는 프로그램
		
		
--------------------------------------------------------------------

	객체(Object)를 만드는 방법
	==> 객체는 JVM이 만들어준다.
		개발자는 필요한 부품을 만들어 달라고 명령만 내리면 된다.
		
		형식 ] 
			클래스 이름		변수;
			변수		= new 클래스이름();
			
		예 ]
			Test라는 클래스가 있다면
			
			Test t;
				==> t는 (레퍼런스) 변수가 된다.
				이변수의 heap Type은 Test가 된다.
			 t = new Test();
			 	==> new 명령을통해서 
			 		클래스가 Object(객체)가 된다.
			 		컴퓨터가 물건을 만든다는 개념은
			 		메모리에 클래스가 만들어진다는 개념...
			 따라서 heap에 만들어진 클래스를 Instance 라 부르고
			 만들어진 Instance의 주소를 기억할 변수를
			 Reference(변수) 라고 부른다.
			 이 두개를 통칭해서 Object(객체)라 부른다.
			 
			 
		예 ]
		
			Class Test{
				int a;
				int b;
				void abc(){}
				void xyz(){}
			}
			
			Test t;
			t = new Test();
			
			
-------------------------------------------------------------------------

	객체 사용방법
		==>
		객체를 사용한다는 개념은
		그 목적을 달성하기 위해서 필요한 데이터를 기억하던지...
								기능(함수)을 이용하던지...
								
								
	형식 ]
		
		주소.변수
		주소.함수(데이터)
		
		<== 주소 : 변수
		
		예 ] 
			Test 클래스의 a 변수에10을 기억시키겠다.
			
			Test t;
			t = new Test();
			t.a = 10;
			
			// 함수실행
			t.abc();
				 	
	*****
	참고 ]
		클래스 하나당 오브젝트는 여러개 만들어도 상관없다.
		즉, 설계도는 한장만 있으면 되는데
		설계도 한장으로 물건은 여러개 만들 수 있다.
		주소를 이용해서 사용하게
		
		예 ]
			Test t = new Test();
			Test t2 = new Test();
			
			toprint()가 멤버변수 a의 내용을 출력하는 기능이라고 가정할 경우
			t.a = 10;
			t2.a = 1000;
			
			t.toPrint(); ==> 10을 출력...
			t2.toPtint(); ==> 1000을 출력...
		따라서 각각의 오브젝트는 별개로 독립되어서 실행될 수 있다.
		
	참고 ] 
		지역변수
			==> 해당 지역에서만 사용 할 수 있는 변수
				그 문장이 실행되는 순간 변수가 만들어 지고
				그 블럭을 벗어나면 그 변수는 사라지게 된다.
				
		전역변수
			==> 모든 지역에서 사용 할 수 있는 변수
			클래스 안에서 만들어진 변수는
			new 시키는 순간 heap영역에 만들어지기 떄문에....
			heap 영역의 특성에 따라서 계속 사용할 수 있게 된다.
			
		탄생 시점 new 시키는 순간
		소멸시점 프로그램이 종료되는 순간	
			
=======================================================================

	객체의 배열
	==> 하나의 클래스를 가지고 여러개의 오브젝트를 만들 수 있으므로..
		이때 만들어지는 오브젝트들을 배열로 만들어서 관리 할 수 있다.
		
		만드는 방법 ]
		
			Test[] t;
			==> Test 인스턴스들을 배열로 관리할 주소 변수를 만든다.
			
			t = new Test[갯수];
			==> 관리할 갯수를 정해서 배열을 만든다.
			아직 실질적은 오브젝트는 만들어 놓지 못한 상태....
			
			예 ]
				Class Test{
					int a;
					}
					
				Test[] t = new Test[5];
				==> Test 타입의 객체를 관리할 공간만 확보한 상태
					따라서
					
					t[0].a ==> 이렇게 접근해서 a변수에 기억된 숫자를 꺼내오지 못한다.
				따라서 
					for(int i= 0; i<5; i++){
					t[i] = new Test();
					}
					의 작업으로 실제 오브젝트를 만들어서 채워줘야 한다.
			
			사용방법 ]
			
				배열변수[위치값].변수이름 = ?;
				배열변수[위치값].함수이름();
				
				배열 변수[위치값] 안에 있는 주소는 오브젝트 참조 주소 이기 떄문에...
				"." 을 이용해서 접근해야 한다.
				==> 소속을 밝혀줘야 한다.

---------------------------------------------------------------------------

	함수의 오버로딩(Overloading : 함수의 중첩)	
	==> 함수의 이름을 중첩해서 만든다 라는 의미에서 "함수의 중첩"이다.
	
	원칙적으로 한 클래스 안에서는 함수의 이름이 모두 달라야 한다.
	갈은 이름의 함수가 존재 하면 오류가 발생한다.
	
	이러다 보니 가독성에 있어서 문제가 발생한다.
	즉, 가독성이란 함수의 이름만 봐도 그 함수가 어떤 기능을 가지고 있는 함수인지를 알아야 하는데
	함수의 이름을 모두 다르게 만들다 보면 가독성에 있어서 
	문제가 발생할 여지가 많아진다.
	
	이런 문제를 해결하기 위해 도입된 문법이
	함수의 오버로딩 이다.
	
	오버로딩이란?
	같은 클래스 안에  같은 이름의 함수를 만들 수 있다.
	단, 다음 조건은 반드시 지켜줘야 한다.
	
		오버로딩조건 ]
			0. 해당 클래스에 오버로딩 하려는 함수가 있어야 한다. 
			1. 함수의 이름이 같아야 한다.
			2. 매개 변수의  갯수, 순서, 형태 중 하나 이상이 달라야 한다.
			3. 반환값 과는 상관없다.
			
		예 ]
			void abc(){}
			void abc(int a){}			==> O
					
			void xyz(int a){}
			void xyz(float a){}			==> O
			
			void lmn(int a, float b ){}
			void lmn(float b, int a){} 	==> O
			
			int efg(){}
			void efg(){}				==> X 반환값과는 상관없다.
			
			void hij(int a, int b){}
			void hij(int b, int a){}	==> X 입력되는 타입이 동일하므로 같은 형태로 취급한다.
			
			결론 ] 
				함수를 호출 할 때 정확 한 함수를 선택할 수 있도록 해야한다.
				==> 원래의 함수의 오버로딩 규칙
				
				
		사용법 ]
			==> 다른사람이 만든 클래스에도 오버로딩이 구현된 함수를 볼 수 있다.
				이들 함수를 사용하는 방법
					원하는 기능을 하는 함수가 요구한 데이터를 
					형태와 순서에 맞춰서 정확하게 입력해주면 된다.
			
			
			
			
			
			
					