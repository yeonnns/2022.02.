# jdbc02

SELECT 질의 결과 사용하기
	
	JDBC에서 SELECT 질의명령을 보내면 그 결과(인라인테이블)을
	(이 때 만들어지는 인라인테이블은 메모리에 저장된다.)
	ResultSet 이라는 인터페이스가 관리하도록 하고 있다.
	
	우리는 ResultSet 이라는 인터페이스를 이용해서
	인라인테이블의 결과 중에서 필요한 데이터를 선택해서 사용할 수 있게된다.
	
	인라인 테이블의 결과중 원하는 데이터를 꺼내는 방법은
	몇번째 줄의 몇번째 칸의 데이터를 꺼내주세요. 가 아니고
	
	현재 작업줄의 몇번째 칸의 데이터를 꺼내주세요.. 라는 방식이다. 
	이때 몇번째 칸의 의미는 질의명령중 select 절에 나열된 필드의 순서가 된다.
	(현재 작업줄 : 가상의 레코드 포인터 라고 표현한다.)
	
	주요함수 ]
		
		1. 가상의 레코드 포인터(현재 작업 위치)를 이동시키는 명령
			
			absolute(int row)
				==> 지정한 줄로 이동
			afterLast()
				==> EOF(End Of File)로 이동
				
			beforeFirst()
				==> BOF(Begin Of First)로 이동
			
			first()
				==> 첫번째 행으로 이동
				
			last()
				==> 마지막 행으로 이동
			
				
			next()
				==> 현재 작업줄에서 다음줄로 이동한다.
				
			previous()
				==> 현재 작업줄에서 바로 이전줄로 이동한다.
			
			참고 ]
				
				afterLast()
				beforFirst()
				==> 항상 이동에 성공한다.
					왜냐하면 BOF, EOF는 인라인테이블이 탄생되면
					자바가 자동으로 만들어주는 가상의 위치이므로
					항상 존재한다.
				이외의 함수들은 이동에 실패할 수 있다.
				
		2. 데이터를 꺼내는 함수
			
			getXXX()
			==> XXX는 꺼낼 데이터를 사용할 데이터형태이름
				==> 주의 사항은 실제 데이터베이스에서 사용하던 타입이 아니고
					자바에서 사용하고 싶은 타입으로 꺼내면 된다.
					(데이터베이스에 있는 형태와 달라도 상관이 없다.)
			
			예 ]
				나이를 꺼내고 싶다.
					데이터베이스 : number
					==> jdbc		: int
					
				급여를 꺼내고 싶다.
					데이터베이스	: number
					==> jdbc		: int
					
					
			참고 ]
				꺼내는 방식
					
					1. getXXX(int 위치값)
						==> 이때 위치값은
							자바는 인덱스가 0부터 시작하지만
							JDBC 만큼은 데이터베이스를 다루고 있으므로 1부터 시작한다.
							위치값은 SELECT 절에서 나열한 필드의 순서를 의미한다.
							
					2. getXXX(String 필드이름)
						==> 필드이름으로 꺼내는 방식
						
			주의 ]
				질의명령이
					
					SELECT
						ename as 이름
					FROM
						emp
					;
				으로 조회한 경우 꺼낼때
				
				getString("ename"); ===> X
				getString("이름");  ===> O
				
	정리하자면
		SELECT 질의명령을 실행하면
		ResultSet 으로 결과 만들어지고
		먼저 필요한 행으로 레코드 포인터를 이동한 후
		필요한 데이터를 하나씩 꺼내야 한다.
		
PreparedStatement
==> 질의명령을 데이터베이스에게 전달하는 Statement 의 일종이다.
	
	Statement 의 불편한 점은
	질의 명령을 실행할 때마다 매번 질의명령을 데이터베이스에게 전달하는 형식을 취한다.
	그런데 질의 명령이 긴 경우도 있다.
	그런데 데이터베이스 서버는 네트워크를 사용한다.
	
	문제점을 해결하기 위한 다른 Statement를 준비했다.
	그것이 PreparedStatement이다.
	이것은 미리 질의명령을 알려준 후 실행이 필요하면 실행만 해달라고 요구하면 되는 형식이다.
	즉, 매번 질의명령을 알려줄 필요가 없다.
	
	작업을 하다보면 매번 같은 질의명령을 실행할 필요가 있을 때가 있다.
	그런데 일반 Statement는 매번 같은 질의명령이라도 다시 보내야 한다.
	이런 경우 미리 질의명령을 알려주는 전속 Statement를 만들어 놓고
	질의 명령은 보내지 마리고 실행만 부탁한다면 처리속도가 그만큼 빨라지고
	코드 작성도 편하게 될 것이다.
	
	만드는 방법
		con.prepareStatement();
		
	참고 ]
		자주 사용되는 질의명령이라도 데이터는 달라질 수 있다.
		이 문제를 해결하는 방법으로
		질의명령을 만들때
		변화되는 데이터부분은 	?	로 대신한다.
		
		?	부분만 질의명령을 실행하기 직전에 채워놓고
		질의 명령을 실행하는 방식을 사용하고 있다.
		
		예 ]
			String sql = "SELECT * FROM emp WHERE ename = ? "
			
		 주요함수
		 	? 채워주는 함수
		 	
		 		setXXX(위치값, 데이터);
		 		
		 	XXX는 채울 데이터의 자바 타입을 선택한다.
		 	위치는 ? 의 위치 (질의명령 내에서 몇번째 ? 인지...)
		 	데이터는 채울 데이터를 의미
		 	
		 	
	참고 ]
		Statement는 속도는 느리지만
		매번 다른 질의명령을 처리할 수 있다.
		PreparedStatement 속도는 빠르지만
		항상 동일한 질의명령만 처리할 수 있다.